class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        if(nums.size() == 0){return 0;}
        return bs(0, nums.size() - 1, target, nums);
        }
    int bs(int start, int end, int target, vector<int>& nums) {    //binary search function
            if(start == end){
                if(target <= nums[start]){return start;}
                else{return start + 1;}
            }
            int mid = (start + end) / 2;
            if(target == nums[mid]){return mid;}
            else if(target < nums[mid]){return bs(start, mid, target, nums);}
            else{return bs(mid + 1, end, target, nums);}
    }
};

//deals with duplicates
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int start = 0, end = nums.size() - 1;
        while(start <= end){
            int mid = (start + end) / 2;
            if(target > nums[mid]){
                start = mid + 1;
            }
            else{
                end = mid - 1;  //difference
            }
        }
        // start >= end+1, yet start <= mid <= end+1, thus start == end+1
        return start;
    }
};
