class Solution {
    public int[] searchRange(int[] nums, int target) {
        int n = nums.length;
        int start = 0;
        int end = n-1;
        int front = -1;
        int rear = -1;
        while(start <= end){
            int mid = (start + end)/2;
            if(nums[mid] == target){
                front = mid;
                rear = mid;
                while(front - 1 >= 0 && nums[front-1] == target)   front--;
                while(rear + 1 < n && nums[rear+1] == target)  rear++;
                break;
            }
            else if(nums[mid] > target) end = mid - 1;
            else    start = mid + 1;
        }
        int[] out = {front, rear};
        return out;
    }
}

//Iteration, strict O(logn)
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result = {nums.length, -1};
        bS(target, nums, result, 0, nums.length-1);
        if(result[0] > result[1])   result[0] = -1;
        return result;
    }
    
    public void bS(int target, int[] nums, int[] result, int start, int end){
        if(start > end) return;
        int mid = (start + end)/2;
        if(nums[mid] == target){
            // both will be executed if condition matches
            if(mid < result[0]){
                result[0] = mid;
                bS(target, nums, result, start, mid-1);
            }
            if(mid > result[1]){
                result[1] = mid;
                bS(target, nums, result, mid+1, end);
            }
        }
        else if(target < nums[mid]) bS(target, nums, result, start, mid-1);
        else    bS(target, nums, result, mid+1, end);
    }
}
